<?php
require_once __DIR__ . "/../data/KategorieDokumentu.php";
require_once __DIR__ . "/../repository/DokumentRepository.php";

use Connection\Connection;

class KategorieDokumentuRepository extends Repository {

    static function getTableName() {
        return "kategorie_dokumentu";
    }

    static function readAllDeep($lim=99) {
        return self::readAll($lim);
    }

    static function readAllRearDeep($deep, $lim=99) {
        return self::readAll($lim);
    }

    static function readDeep($id) {
        return self::read($id);
    }

    static function readRearDeep($id, $deep) {
        return self::read($id);
    }

    static function update($data) {
        Connection::pdo()->beginTransaction();
        $table = self::getTableName();
        $idKategorie = $data->id;

        if ($data->nazev) {
            $sql = "UPDATE ${table} SET nazev=(:nazev) WHERE id=${idKategorie}";
            $statement = Connection::pdo()->prepare($sql);
            $statement->bindValue(':nazev', $data->nazev);
            $statement->execute();
        }
        Connection::pdo()->commit();
        return true;
    }

    static function create($data) {
        $table = self::getTableName();
        $sql = "INSERT INTO ${table}(nazev) 
	    VALUES (:nazev)";
        $statement = Connection::pdo()->prepare($sql);
        $statement->execute(array(
            ':nazev' => $data->nazev,
        ));
        return Connection::pdo()->lastInsertId();
    }

    static function createDeep($data) {
        return self::create($data);
    }

    static function read($id) {
        $tmp= parent::read($id);
        return self::arry2Obj($tmp);
    }
    static function arry2Obj($data) {
        $tmp = new KategorieDokumentu();
        $tmp->id = intval($data["id"]);
        $tmp->nazev = $data["nazev"];
        return $tmp;
    }
    static function readAll($lim = 99) {
        $tmp= parent::readAll($lim); // TODO: Change the autogenerated stub
        $data= array();
        foreach ($tmp as $item) {
            array_push($data, self::arry2Obj($item));
        }
        return $data;
    }
}